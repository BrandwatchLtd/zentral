#!/usr/bin/python
import base64
import json
import os
import plistlib
import ssl
import stat
import subprocess
import tempfile
import time
import urllib2


TLS_HOSTNAME = "%TLS_HOSTNAME%"
ENROLLMENT_URL = "%ENROLLMENT_URL%"
ENROLLMENT_SECRET = """%ENROLLMENT_SECRET%"""
TLS_SERVER_CERTS = "%TLS_SERVER_CERTS%"

MIN_CONFIGURATION_PROFILE_SANTA_VERSION = (0, 9, 21)
USER_AGENT = "Zentral/santaenrollment 0.1"

SANTA_LAUNCH_DAEMON_PLIST = "/Library/LaunchDaemons/com.google.santad.plist"
ZENTRAL_DIR = "/usr/local/zentral/"
ZENTRAL_SANTA_DIR = os.path.join(ZENTRAL_DIR, "santa")
MACHINE_ID_PLIST = os.path.join(ZENTRAL_SANTA_DIR, "machine_id.plist")


def stop_santa():
    subprocess.check_call([
        "/bin/launchctl",
        "unload", "-w",
        SANTA_LAUNCH_DAEMON_PLIST
    ])
    # wait a bit. TODO: really?!?
    time.sleep(1)


def start_santa():
    subprocess.check_call([
        "/bin/launchctl",
        "load", "-w",
        SANTA_LAUNCH_DAEMON_PLIST
    ])


def version_tuple_from_version_str(version):
    return tuple(int(i) for i in version.split("."))


def get_santa_versions():
    try:
        version_dict = json.loads(subprocess.check_output(["santactl", "version", "--json"]))
        return set(version_tuple_from_version_str(version.split()[0]) for version in version_dict.values())
    except OSError:
        return set([])


def get_max_santa_version():
    try:
        return max(get_santa_versions())
    except ValueError:
        return None


def get_serial_number_and_uuid():
    output = subprocess.check_output(["ioreg", "-a", "-c", "IOPlatformExpertDevice", "-d", "2"])
    ioreg_result = plistlib.readPlistFromString(output)["IORegistryEntryChildren"][0]
    return ioreg_result["IOPlatformSerialNumber"], ioreg_result["IOPlatformUUID"]


def install_configuration_profile(path):
    return subprocess.check_call(["/usr/bin/profiles", "-I", "-F", path])


def post_enrollment_secret():
    req = urllib2.Request(ENROLLMENT_URL)
    req.add_header("User-Agent", USER_AGENT)
    req.add_header("Content-Type", "application/json")
    ctx = ssl.create_default_context(cafile=TLS_SERVER_CERTS or None)
    serial_number, uuid = get_serial_number_and_uuid()
    data = json.dumps({"secret": ENROLLMENT_SECRET,
                       "serial_number": serial_number,
                       "uuid": uuid})
    resp = urllib2.urlopen(req, data=data, context=ctx)
    return json.load(resp)


def enroll():
    resp = post_enrollment_secret()

    # replace or create MachineID plist
    if os.path.exists(MACHINE_ID_PLIST):
        os.unlink(MACHINE_ID_PLIST)
    machine_id_plist_dir = os.path.dirname(MACHINE_ID_PLIST)
    if not os.path.exists(machine_id_plist_dir):
        os.makedirs(machine_id_plist_dir)
    plistlib.writePlist({"MachineID": resp["machine_id"]}, MACHINE_ID_PLIST)

    # save configuration profile content
    configuration_profile_path = os.path.join(ZENTRAL_SANTA_DIR, resp["configuration_profile"]["name"])
    configuration_profile_content = resp["configuration_profile"]["content"]
    configuration_profile_content = base64.b64decode(configuration_profile_content)
    configuration_profile_fh, configuration_profile_path = tempfile.mkstemp()
    with os.fdopen(configuration_profile_fh, "w") as f:
        f.write(configuration_profile_content)

    # install configuration profile
    install_configuration_profile(configuration_profile_path)

    # remove configuration profile file
    os.unlink(configuration_profile_path)

    if get_max_santa_version() < MIN_CONFIGURATION_PROFILE_SANTA_VERSION:
        # save config.plist
        config_plist_path = os.path.join("/var/db/santa/",
                                         resp["config_plist"]["name"])
        with open(config_plist_path, "w") as f:
            f.write(resp["config_plist"]["content"])
        # fix permissions
        os.chmod(config_plist_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)


def update_default_zentral_plist():
    subprocess.check_call([
        "/usr/bin/defaults", "write",
        "/Library/Preferences/io.zentral.plist",
        "base_url", "https://{}".format(TLS_HOSTNAME)
    ])


def sync_santa():
    subprocess.check_call([
        "/usr/local/bin/santactl", "sync",
    ])


if __name__ == "__main__":
    stop_santa()
    enroll()
    start_santa()
    update_default_zentral_plist()
    sync_santa()
